package thw.edu.javaII.port.warehouse.ui.panels;

import java.awt.*;
import javax.swing.*;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
import thw.edu.javaII.port.warehouse.model.Produkt;
import thw.edu.javaII.port.warehouse.model.deo.WarehouseDEO;
import thw.edu.javaII.port.warehouse.model.deo.WarehouseReturnDEO;
import thw.edu.javaII.port.warehouse.model.deo.Zone;
import thw.edu.javaII.port.warehouse.model.deo.Command;
import thw.edu.javaII.port.warehouse.ui.common.Session;
import thw.edu.javaII.port.warehouse.model.common.Cast;
import net.miginfocom.swing.MigLayout;

public class ProduktPage extends JPanel {
    private Session ses;
    private JTable table;
    private ProduktTableModel tableModel;

    public ProduktPage(Session ses) {
        this.ses = ses;
        setLayout(new BorderLayout());
        initializeUI();
    }

    private void initializeUI() {
        JLabel lblTitle = new JLabel("Produkte Übersicht");
        lblTitle.setFont(new Font("Arial", Font.BOLD, 16));
        add(lblTitle, BorderLayout.NORTH);

        tableModel = new ProduktTableModel();
        table = new JTable(tableModel);
        table.setFillsViewportHeight(true);
        table.setRowHeight(25);
        add(new JScrollPane(table), BorderLayout.CENTER);

        // Button-Panel hinzufügen
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 5)); // hgap und vgap auf 5
        JButton addButton = new JButton("Produkt anlegen");
        JButton editButton = new JButton("Produkt bearbeiten");
        JButton deleteButton = new JButton("Produkt löschen");
        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);
        add(buttonPanel, BorderLayout.SOUTH);

        // Action listeners für Buttons
        addButton.addActionListener(e -> {
            new AddProdukt(ses, this).setVisible(true);
            refresh();
        });
        editButton.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow >= 0) {
                Produkt selectedProdukt = tableModel.getProduktAt(selectedRow);
                new EditProdukt(ses, null, selectedProdukt).setVisible(true);
                refresh();
            } else {
                JOptionPane.showMessageDialog(this, "Bitte wählen Sie ein Produkt aus.", "Fehler", JOptionPane.ERROR_MESSAGE);
            }
        });
        deleteButton.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow >= 0) {
                Produkt selectedProdukt = tableModel.getProduktAt(selectedRow);
                new DeleteProdukt(ses, null, selectedProdukt).setVisible(true);
                refresh();
            } else {
                JOptionPane.showMessageDialog(this, "Bitte wählen Sie ein Produkt aus.", "Fehler", JOptionPane.ERROR_MESSAGE);
            }
        });

        refresh();
    }

    public void refresh() {
        try {
            WarehouseDEO deo = new WarehouseDEO();
            deo.setZone(Zone.PRODUKT);
            deo.setCommand(Command.LIST);
            WarehouseReturnDEO ret = ses.getCommunicator().sendRequest(deo);
            if (ret.getStatus() == thw.edu.javaII.port.warehouse.model.deo.Status.OK) {
                java.util.List<Produkt> produktList = Cast.safeListCast(ret.getData(), Produkt.class);
                tableModel.setData(produktList);
            } else {
                JOptionPane.showMessageDialog(this, "Fehler beim Abrufen der Produkte: " + ret.getMessage(), "Fehler", JOptionPane.ERROR_MESSAGE);
                tableModel.setData(new java.util.ArrayList<>());
            }
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Kommunikationsfehler: " + e.getMessage(), "Fehler", JOptionPane.ERROR_MESSAGE);
            tableModel.setData(new java.util.ArrayList<>());
        }
    }
}

class ProduktTableModel extends javax.swing.table.AbstractTableModel {
    private java.util.List<Produkt> data = new java.util.ArrayList<>();
    private String[] columnNames = {"ID", "Name", "Hersteller", "Preis"};
    private final DecimalFormat priceFormat;

    public ProduktTableModel() {
        // Euro-Format mit deutschem Locale initialisieren
        DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.GERMAN);
        symbols.setDecimalSeparator(',');
        symbols.setGroupingSeparator('.');
        priceFormat = new DecimalFormat("#,##0.00 €", symbols);
    }

    public void setData(java.util.List<Produkt> data) {
        this.data = data != null ? data : new java.util.ArrayList<>();
        fireTableDataChanged();
    }

    public Produkt getProduktAt(int row) {
        return data.get(row);
    }

    @Override
    public int getRowCount() {
        return data.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    @Override
    public Object getValueAt(int row, int col) {
        Produkt produkt = data.get(row);
        switch (col) {
            case 0: return produkt.getId();
            case 1: return produkt.getName();
            case 2: return produkt.getHersteller();
            case 3: return priceFormat.format(produkt.getPreis()); // Preis im Euro-Format
            default: return null;
        }
    }

    @Override
    public String getColumnName(int col) {
        return columnNames[col];
    }
}