package thw.edu.javaII.port.warehouse.server;

import thw.edu.javaII.port.warehouse.model.LagerBestand;
import thw.edu.javaII.port.warehouse.model.LagerPlatz;
import thw.edu.javaII.port.warehouse.model.Nachbestellung;
import thw.edu.javaII.port.warehouse.model.deo.Command;
import thw.edu.javaII.port.warehouse.model.deo.Status;
import thw.edu.javaII.port.warehouse.model.deo.WarehouseDEO;
import thw.edu.javaII.port.warehouse.model.deo.WarehouseReturnDEO;
import thw.edu.javaII.port.warehouse.model.deo.Zone;
import thw.edu.javaII.port.warehouse.server.data.Database;

import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Logger;

public class NachbestellungService {
    private final Database store;
    private final Logger logger = Logger.getLogger(NachbestellungService.class.getName());
    private final Server server;
    private final Timer timer;

    public NachbestellungService(Database store, Server server) {
        this.store = store;
        this.server = server;
        this.timer = new Timer(true);
        startInventoryCheck();
    }

    private void startInventoryCheck() {
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                try {
                    checkInventoryAndTriggerReorder();
                } catch (Exception e) {
                    logger.severe("Fehler bei der Bestandsprüfung: " + e.getMessage());
                }
            }
        }, 0, 30_000); // Alle 30 Sekunden
    }

    private void checkInventoryAndTriggerReorder() {
        List<LagerBestand> bestands = store.getLagerBestands();
        for (LagerBestand bestand : bestands) {
            LagerPlatz platz = bestand.getLagerplatz_id();
            if (platz != null && bestand.getAnzahl() < platz.getKapazitaet() / 2) {
                triggerReorder(bestand, platz);
            }
        }
    }

    private void triggerReorder(LagerBestand bestand, LagerPlatz platz) {
        int menge = platz.getKapazitaet() - bestand.getAnzahl();
        Nachbestellung nachbestellung = new Nachbestellung();
        nachbestellung.setProdukt(bestand.getProdukt_id());
        nachbestellung.setMenge(menge);
        nachbestellung.setLagerplatz(platz);
        nachbestellung.setStatus("ausgelöst");

        try {
            store.addNachbestellung(nachbestellung);
            logger.info("Nachbestellung ausgelöst: Produkt=" + bestand.getProdukt_id().getName() + ", Menge=" + menge);

            TimerTask deliveryTask = new TimerTask() {
                @Override
                public void run() {
                    try {
                        deliverReorder(nachbestellung, bestand);
                    } catch (Exception e) {
                        logger.severe("Fehler bei der Lieferung der Nachbestellung: " + e.getMessage());
                    }
                }
            };
            timer.schedule(deliveryTask, 160_000); // 160 Sekunden Verzögerung
        } catch (Exception e) {
            logger.severe("Fehler beim Auslösen der Nachbestellung: " + e.getMessage());
        }
    }

    private void deliverReorder(Nachbestellung nachbestellung, LagerBestand bestand) {
        synchronized (store) {
            try {
                bestand.setAnzahl(bestand.getAnzahl() + nachbestellung.getMenge());
                store.updateLagerBestand(bestand);
                nachbestellung.setStatus("eingetroffen");
                store.addNachbestellung(nachbestellung); // Aktualisiert die Nachbestellung
                logger.info("Nachbestellung eingetroffen: Produkt=" + nachbestellung.getProdukt().getName() + ", Menge=" + nachbestellung.getMenge());

                // Globale Nachricht an alle Clients
                WarehouseDEO deo = new WarehouseDEO();
                deo.setZone(Zone.NACHBESTELLUNG);
                deo.setCommand(Command.NOTIFY);
                deo.setData("Nachbestellung eingetroffen: " + nachbestellung.getProdukt().getName() + ", Menge: " + nachbestellung.getMenge());
                WarehouseReturnDEO response = new WarehouseReturnDEO(null, "Benachrichtigung gesendet", Status.OK);
                server.broadcast(deo, response);
            } catch (Exception e) {
                logger.severe("Fehler bei der Verarbeitung der Nachbestellung: " + e.getMessage());
            }
        }
    }

    public void shutdown() {
        timer.cancel();
        logger.info("NachbestellungService heruntergefahren");
    }
}