package thw.edu.javaII.port.warehouse.ui.model;

import thw.edu.javaII.port.warehouse.model.Nachbestellung;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class NachbestellungTableModel extends AbstractTableModel {
    private static final long serialVersionUID = 1L;
    private List<Nachbestellung> data = new ArrayList<>();
    private final SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");

    public NachbestellungTableModel(List<Nachbestellung> data) {
        setData(data);
    }

    public void setData(List<Nachbestellung> data) {
        this.data = (data != null) ? data : new ArrayList<>();
        fireTableDataChanged();
    }

    public List<Nachbestellung> getData() {
        return data;
    }

    public void sortById(boolean ascending) {
        Comparator<Nachbestellung> comparator = Comparator.comparingInt(Nachbestellung::getId);
        if (!ascending) comparator = comparator.reversed();
        Collections.sort(data, comparator);
        fireTableDataChanged();
    }

    public void sortByName(boolean ascending) {
        Comparator<Nachbestellung> comparator = Comparator.comparing(n -> n.getProdukt().getName());
        if (!ascending) comparator = comparator.reversed();
        Collections.sort(data, comparator);
        fireTableDataChanged();
    }

    public void sortByDate(boolean ascending) {
        Comparator<Nachbestellung> comparator = Comparator.comparing(Nachbestellung::getDatum);
        if (!ascending) comparator = comparator.reversed();
        Collections.sort(data, comparator);
        fireTableDataChanged();
    }

    public void sortByStatus(boolean ascending) {
        Comparator<Nachbestellung> comparator = Comparator.comparing(Nachbestellung::getStatus);
        if (!ascending) comparator = comparator.reversed();
        Collections.sort(data, comparator);
        fireTableDataChanged();
    }

    @Override
    public int getRowCount() {
        return data.size();
    }

    @Override
    public int getColumnCount() {
        return 6; // ID, Produkt, Menge, Lagerplatz, Datum, Status
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Nachbestellung nachbestellung = data.get(rowIndex);
        switch (columnIndex) {
            case 0: return nachbestellung.getId();
            case 1: return nachbestellung.getProdukt().getName();
            case 2: return nachbestellung.getMenge();
            case 3: return nachbestellung.getLagerplatz().getName();
            case 4: return dateFormat.format(nachbestellung.getDatum());
            case 5: return nachbestellung.getStatus();
            default: return null;
        }
    }

    @Override
    public String getColumnName(int column) {
        switch (column) {
            case 0: return "ID";
            case 1: return "Produkt";
            case 2: return "Menge";
            case 3: return "Lagerplatz";
            case 4: return "Datum";
            case 5: return "Status";
            default: return null;
        }
    }

    public void setJTableColumnsWidth(JTable table, int tablePreferredWidth, double... percentages) {
        double total = 0;
        for (double percentage : percentages) {
            total += percentage;
        }
        for (int i = 0; i < table.getColumnModel().getColumnCount(); i++) {
            TableColumn column = table.getColumnModel().getColumn(i);
            column.setPreferredWidth((int) (tablePreferredWidth * (percentages[i] / total)));
        }
    }

    public Nachbestellung getObjectAt(int selectedRow) {
        return data.get(selectedRow);
    }
}