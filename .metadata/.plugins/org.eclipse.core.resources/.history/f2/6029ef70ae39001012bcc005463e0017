package thw.edu.javaII.port.warehouse.server;

import thw.edu.javaII.port.warehouse.model.common.Info;
import thw.edu.javaII.port.warehouse.model.deo.WarehouseDEO;
import thw.edu.javaII.port.warehouse.model.deo.WarehouseReturnDEO;
import thw.edu.javaII.port.warehouse.server.data.Database;
import thw.edu.javaII.port.warehouse.server.init.Loading;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

public class Server {
    public static boolean run = true;
    private static Server instance;
    private final Logger logger = Logger.getLogger(Server.class.getName());
    private final List<Service> clients = new ArrayList<>();
    private Database store; // Nicht final, da im start initialisiert

    private Server() {
        // Konstruktor bleibt leer, da Database im start initialisiert wird
    }

    public static Server getInstance() {
        if (instance == null) {
            instance = new Server();
        }
        return instance;
    }

    public void start() {
        ServerSocket server = null;
        try {
            logger.info("Initialisiere Datenbank...");
            this.store = new Database(); // Datenbank hier initialisieren
            Loading loading = new Loading();
            loading.initLoading(store);
            logger.info("Datenbank erfolgreich initialisiert");

            server = new ServerSocket(Info.PORT_SERVER);
            logger.info("Lagerverwaltungsserver läuft auf Port " + Info.PORT_SERVER);
            while (run) {
                Socket sock = server.accept();
                logger.info("Neue Client-Verbindung akzeptiert");
                Service service = new Service(sock, store);
                synchronized (clients) {
                    clients.add(service);
                }
                service.start();
            }
        } catch (IOException e) {
            logger.severe("Serverfehler: " + e.getMessage());
            e.printStackTrace();
        } catch (RuntimeException e) { // Fängt RuntimeException von Database-Konstruktor
            logger.severe("Fehler bei der Datenbankinitialisierung: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            logger.severe("Allgemeiner Fehler beim Starten des Servers: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (server != null) {
                try {
                    server.close();
                } catch (IOException e) {
                    logger.warning("Fehler beim Schließen des Serversockets: " + e.getMessage());
                }
            }
        }
    }

    public void broadcast(WarehouseDEO deo, WarehouseReturnDEO response) {
        synchronized (clients) {
            for (Service client : new ArrayList<>(clients)) { // Kopie, um ConcurrentModificationException zu vermeiden
                try {
                    client.sendResponse(deo, response);
                } catch (IOException e) {
                    logger.warning("Fehler beim Senden an Client: " + e.getMessage());
                    clients.remove(client); // Entferne fehlerhafte Clients
                }
            }
        }
    }

    public void removeClient(Service service) {
        synchronized (clients) {
            clients.remove(service);
        }
    }

    public static void main(String[] args) {
        Server.getInstance().start();
    }
}