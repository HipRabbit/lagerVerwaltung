package thw.edu.javaII.port.warehouse.ui.panels;

import thw.edu.javaII.port.warehouse.model.Nachbestellung;
import thw.edu.javaII.port.warehouse.ui.common.Session;
import thw.edu.javaII.port.warehouse.ui.model.NachbestellungTableModel;

import javax.swing.*;
import java.awt.*;

public class NachbestellungPage extends JPanel {
    private static final long serialVersionUID = 1L;
    private JTable table;
    private NachbestellungTableModel tableModel;
    private Session ses;

    public NachbestellungPage(Session ses) {
        this.ses = ses;
        setLayout(new BorderLayout(0, 0));
        initializeUI();
    }

    private void initializeUI() {
        JPanel topPanel = new JPanel(new BorderLayout());
        JLabel lblTitle = new JLabel("Nachbestellungen");
        lblTitle.setFont(new Font("Lucida Grande", Font.BOLD, 16));
        topPanel.add(lblTitle, BorderLayout.NORTH);

        JPanel sortPanel = new JPanel();
        sortPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
        JToggleButton sortByIdButton = new JToggleButton("Sortieren nach ID");
        JToggleButton sortByNameButton = new JToggleButton("Sortieren nach Produkt");
        JToggleButton sortByDateButton = new JToggleButton("Sortieren nach Datum");
        JToggleButton sortByStatusButton = new JToggleButton("Sortieren nach Status");

        sortByIdButton.addActionListener(e -> {
            boolean ascending = !sortByIdButton.isSelected();
            tableModel.sortById(ascending);
            sortByIdButton.setText(ascending ? "Sortieren nach ID ↑" : "Sortieren nach ID ↓");
            resetOtherSortButtons(sortByIdButton, sortByNameButton, sortByDateButton, sortByStatusButton);
            updateSortIndicator(0, ascending);
        });

        sortByNameButton.addActionListener(e -> {
            boolean ascending = !sortByNameButton.isSelected();
            tableModel.sortByName(ascending);
            sortByNameButton.setText(ascending ? "Sortieren nach Produkt ↑" : "Sortieren nach Produkt ↓");
            resetOtherSortButtons(sortByNameButton, sortByIdButton, sortByDateButton, sortByStatusButton);
            updateSortIndicator(1, ascending);
        });

        sortByDateButton.addActionListener(e -> {
            boolean ascending = !sortByDateButton.isSelected();
            tableModel.sortByDate(ascending);
            sortByDateButton.setText(ascending ? "Sortieren nach Datum ↑" : "Sortieren nach Datum ↓");
            resetOtherSortButtons(sortByDateButton, sortByIdButton, sortByNameButton, sortByStatusButton);
            updateSortIndicator(4, ascending);
        });

        sortByStatusButton.addActionListener(e -> {
            boolean ascending = !sortByStatusButton.isSelected();
            tableModel.sortByStatus(ascending);
            sortByStatusButton.setText(ascending ? "Sortieren nach Status ↑" : "Sortieren nach Status ↓");
            resetOtherSortButtons(sortByStatusButton, sortByIdButton, sortByNameButton, sortByDateButton);
            updateSortIndicator(5, ascending);
        });

        sortPanel.add(sortByIdButton);
        sortPanel.add(sortByNameButton);
        sortPanel.add(sortByDateButton);
        sortPanel.add(sortByStatusButton);
        topPanel.add(sortPanel, BorderLayout.CENTER);

        add(topPanel, BorderLayout.NORTH);

        tableModel = new NachbestellungTableModel(ses.getCommunicator().getNachbestellungen());
        table = new JTable(tableModel);
        tableModel.setJTableColumnsWidth(table, 800, 10, 20, 10, 20, 20, 20);
        table.setShowGrid(true);
        table.setShowVerticalLines(true);
        table.setShowHorizontalLines(true);
        table.setGridColor(Color.DARK_GRAY);
        table.getTableHeader().setDefaultRenderer(new SortIndicatorHeaderRenderer(table.getTableHeader().getDefaultRenderer()));
        add(new JScrollPane(table), BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JButton refreshButton = new JButton("Aktualisieren");
        refreshButton.addActionListener(e -> refresh());
        buttonPanel.add(refreshButton);

        add(buttonPanel, BorderLayout.SOUTH);

        refresh();
    }

    private void resetOtherSortButtons(JToggleButton activeButton, JToggleButton... others) {
        for (JToggleButton button : others) {
            button.setSelected(false);
            button.setText(button.getText().replace(" ↑", "").replace(" ↓", ""));
        }
    }

    public void refresh() {
        tableModel.setData(null);
        tableModel.setData(ses.getCommunicator().getNachbestellungen());
    }

    private void updateSortIndicator(int columnIndex, boolean ascending) {
        SortIndicatorHeaderRenderer renderer = (SortIndicatorHeaderRenderer) table.getTableHeader().getDefaultRenderer();
        renderer.setSortColumn(columnIndex, ascending);
        table.getTableHeader().repaint();
    }
}