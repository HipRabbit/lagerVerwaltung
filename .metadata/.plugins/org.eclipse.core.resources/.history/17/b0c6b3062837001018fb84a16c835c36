package thw.edu.javaII.port.warehouse.ui.panels;

import javax.swing.*;
import java.awt.*;
import thw.edu.javaII.port.warehouse.model.Produkt;
import thw.edu.javaII.port.warehouse.model.deo.Command;
import thw.edu.javaII.port.warehouse.model.deo.WarehouseDEO;
import thw.edu.javaII.port.warehouse.model.deo.WarehouseReturnDEO;
import thw.edu.javaII.port.warehouse.model.deo.Zone;
import thw.edu.javaII.port.warehouse.model.LagerBestand;
import thw.edu.javaII.port.warehouse.ui.common.Communicator;
import thw.edu.javaII.port.warehouse.ui.LagerUI;

public class ProduktOptionDialog extends JDialog {
    private Produkt produkt;
    private LagerBestand lagerBestand;
    private Communicator communicator;
    private ProduktPage produktPage;
    private BestandPage bestandPage;

    public ProduktOptionDialog(JDialog parent, Produkt produkt, LagerBestand lagerBestand, Communicator communicator, ProduktPage produktPage, BestandPage bestandPage) {
        super(parent, "Produktoption auswählen", true);
        this.produkt = produkt;
        this.lagerBestand = lagerBestand;
        this.communicator = communicator;
        this.produktPage = produktPage;
        this.bestandPage = bestandPage;
        initComponents();
        setLocationRelativeTo(parent);
    }

    private void initComponents() {
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel label = new JLabel("Was möchten Sie tun?");
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        add(label, gbc);

        JButton einlagernButton = new JButton("Produkt einlagern");
        JButton bestandHinzufuegenButton = new JButton("Bestand hinzufügen");

        einlagernButton.addActionListener(e -> einlagern());
        bestandHinzufuegenButton.addActionListener(e -> bestandHinzufuegen());

        gbc.gridwidth = 1;
        gbc.gridy = 1;
        gbc.gridx = 0;
        add(einlagernButton, gbc);
        gbc.gridx = 1;
        add(bestandHinzufuegenButton, gbc);

        setSize(300, 150);
    }

    private void einlagern() {
        try {
            boolean success = addProduktOnly(produkt);
            if (success) {
                JOptionPane.showMessageDialog(this, "Produkt erfolgreich eingelagert.", "Erfolg", JOptionPane.INFORMATION_MESSAGE);
                if (produktPage != null) {
                    produktPage.refresh();
                } else {
                    // Falls produktPage nicht aktiv ist, sicherstellen, dass sie beim nächsten Öffnen aktualisiert wird
                    LagerUI lagerUI = (LagerUI) SwingUtilities.getAncestorOfClass(LagerUI.class, this);
                    if (lagerUI != null) {
                        lagerUI.ensureProduktPage();
                        lagerUI.getProduktPage().refresh();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Fehler beim Einlagern des Produkts.", "Fehler", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Fehler: " + ex.getMessage(), "Fehler", JOptionPane.ERROR_MESSAGE);
        }
        dispose();
    }

    private void bestandHinzufuegen() {
        try {
            boolean success = communicator.addProdukt(produkt, lagerBestand);
            if (success) {
                JOptionPane.showMessageDialog(this, "Produkt und Lagerbestand erfolgreich hinzugefügt.", "Erfolg", JOptionPane.INFORMATION_MESSAGE);
                if (produktPage != null) {
                    produktPage.refresh();
                } else {
                    LagerUI lagerUI = (LagerUI) SwingUtilities.getAncestorOfClass(LagerUI.class, this);
                    if (lagerUI != null) {
                        lagerUI.ensureProduktPage();
                        lagerUI.getProduktPage().refresh();
                    }
                }
                if (bestandPage != null) {
                    bestandPage.refresh();
                } else {
                    LagerUI lagerUI = (LagerUI) SwingUtilities.getAncestorOfClass(LagerUI.class, this);
                    if (lagerUI != null) {
                        lagerUI.ensureBestandPage();
                        lagerUI.getBestandPage().refresh();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Fehler beim Hinzufügen des Produkts und Lagerbestands.", "Fehler", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Fehler: " + ex.getMessage(), "Fehler", JOptionPane.ERROR_MESSAGE);
        }
        dispose();
    }

    private boolean addProduktOnly(Produkt p) {
        try {
            WarehouseDEO deo = new WarehouseDEO();
            deo.setZone(Zone.PRODUKT);
            deo.setCommand(Command.ADD);
            deo.setData(p);
            WarehouseReturnDEO response = communicator.sendRequest(deo);
            return response.getStatus().equals(thw.edu.javaII.port.warehouse.model.deo.Status.OK);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
}