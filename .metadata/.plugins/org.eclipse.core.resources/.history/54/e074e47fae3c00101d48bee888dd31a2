package thw.edu.javaII.port.warehouse.ui;

import thw.edu.javaII.port.warehouse.model.LagerBestand;
import thw.edu.javaII.port.warehouse.model.LagerPlatz;
import thw.edu.javaII.port.warehouse.model.Reorder;
import thw.edu.javaII.port.warehouse.ui.common.Communicator;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

public class ReorderService {
    private final Communicator communicator;
    private final int checkInterval = 5000; // Prüfung alle 60 Sekunden

    public ReorderService(Communicator communicator) {
        this.communicator = communicator;
        startReorderCheck();
    }

    private void startReorderCheck() {
    	Timer timer = new Timer(true);
    	timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                checkAndReorder();
            }
        }, 0, checkInterval);
    }

    private void checkAndReorder() {
        List<LagerBestand> bestande = communicator.getBestand();
        if (bestande == null) return;
        for (LagerBestand bestand : bestande) {
            LagerPlatz lagerPlatz = communicator.getLagerPlatzById(bestand.getLagerplatz_id().getId());
            if (lagerPlatz != null && bestand.getAnzahl() < lagerPlatz.getKapazitaet() / 2) {
                int reorderMenge = lagerPlatz.getKapazitaet() - bestand.getAnzahl();
                Reorder reorder = new Reorder(
                    0, // ID wird von der Datenbank generiert
                    bestand.getProdukt_id().getId(),
                    bestand.getLagerplatz_id().getId(),
                    reorderMenge,
                    System.currentTimeMillis(),
                    "AUSSTEHEND"
                );
                communicator.sendReorder(reorder);
                scheduleBestandUpdate(bestand, reorderMenge, reorder);
//                if (communicator.sendReorder(reorder)) {
//                	System.out.println("im here00");                    
//                	scheduleBestandUpdate(bestand, reorderMenge, reorder);
//                }
            }
        }
    }

    private void scheduleBestandUpdate(LagerBestand bestand, int menge, Reorder reorder) {
    	 bestand.setAnzahl(bestand.getAnzahl() + menge);
         communicator.updateLagerBestand(bestand);
         reorder.setStatus("ABGESCHLOSSEN");
         communicator.updateReorder(reorder);
    }
//    	 @Override
//         public void run() {
//             bestand.setAnzahl(bestand.getAnzahl() + menge);
//             communicator.updateLagerBestand(bestand);
//             reorder.setStatus("ABGESCHLOSSEN");
//             communicator.updateReorder(reorder);
//         }
     
//        new Timer().schedule(new TimerTask() {
////            @Override
////            public void run() {
////                bestand.setAnzahl(bestand.getAnzahl() + menge);
////                communicator.updateLagerBestand(bestand);
////                reorder.setStatus("ABGESCHLOSSEN");
////                communicator.updateReorder(reorder);
////            }
////        }, 24000); // 24 Sekunden Verzögerung
    
}