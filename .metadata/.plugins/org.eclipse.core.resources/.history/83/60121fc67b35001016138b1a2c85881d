package thw.edu.javaII.port.warehouse.ui.model;

import thw.edu.javaII.port.warehouse.model.Bestellung;

import javax.swing.table.AbstractTableModel;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

public class BestellungOverviewTableModel extends AbstractTableModel {
    private static final long serialVersionUID = 1L;
    private List<Bestellung> bestellungen;
    private final String[] columnNames = {"ID", "Kunde", "Datum", "Produktanzahl", "Gesamtpreis (EUR)"};
    private final SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");

    public BestellungOverviewTableModel(List<Bestellung> bestellungen) {
        this.bestellungen = bestellungen != null ? bestellungen : new ArrayList<>();
    }

    public void setData(List<Bestellung> bestellungen) {
        this.bestellungen = bestellungen != null ? bestellungen : new ArrayList<>();
        fireTableDataChanged();
    }

    @Override
    public int getRowCount() {
        return bestellungen.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    @Override
    public String getColumnName(int column) {
        return columnNames[column];
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Bestellung bestellung = bestellungen.get(rowIndex);
        switch (columnIndex) {
            case 0: return bestellung.getId();
            case 1: return bestellung.getKunde() != null ? bestellung.getKunde().toString() : "Unbekannt";
            case 2: return bestellung.getDatum() != null ? sdf.format(bestellung.getDatum()) : "Unbekannt";
            case 3: return bestellung.getProdukte() != null ? bestellung.getProdukte().size() : 0;
            case 4: return bestellung.getProdukte() != null ?
                    bestellung.getProdukte().stream()
                            .mapToDouble(bp -> bp.getProdukt().getPreis() * bp.getAnzahl())
                            .sum() : 0.0;
            default: return null;
        }
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
        switch (columnIndex) {
            case 0: return Integer.class;
            case 1: return String.class;
            case 2: return String.class;
            case 3: return Integer.class;
            case 4: return Double.class;
            default: return Object.class;
        }
    }

    public Bestellung getBestellungAt(int rowIndex) {
        return bestellungen.get(rowIndex);
    }

    // Neue Methode: Pr√ºft, ob alle Timestamps gesetzt sind
    public boolean isBestellungComplete(int rowIndex) {
        Bestellung bestellung = bestellungen.get(rowIndex);
        return bestellung.getErfassung() != null &&
               bestellung.getVersand() != null &&
               bestellung.getLieferung() != null &&
               bestellung.getBezahlung() != null;
    }
}